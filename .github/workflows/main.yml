name: Test & Deploy

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deploy_packages:
        description: 'Deploy to GitHub Packages'
        required: false
        default: false
        type: boolean
      version_type:
        description: 'Version type (patch, minor, major, prerelease)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      release_to_npm:
        description: 'Release to NPM (production)'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ========================
  # QUALITY ASSURANCE STAGE
  # ========================
  quality:
    name: Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages (needed for typecheck)
        run: pnpm run build

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run typecheck

      - name: Run tests
        run: pnpm run test

      - name: Run security audit
        run: pnpm audit --audit-level=high

  # ===============
  # BUILD STAGE
  # ===============
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      # Skip Storybook build for now - requires Vue plugin configuration
      # - name: Build Storybook
      #   run: pnpm --filter storybook build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
          retention-days: 7

  # ===============================
  # GITHUB PACKAGES DEPLOYMENT STAGE
  # ===============================
  deploy-github-packages:
    name: Deploy to GitHub Packages
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_packages == 'true') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://npm.pkg.github.com'
          scope: '@thenightproject'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Version packages (manual dispatch)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_packages == 'true'
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          if [ "$VERSION_TYPE" = "prerelease" ]; then
            pnpm changeset version --snapshot beta
          else
            echo "---" > .changeset/auto-version.md
            echo '"@thenightproject/supaweb3-ui": ${{ github.event.inputs.version_type }}' >> .changeset/auto-version.md
            echo '"@thenightproject/supaweb3-config": ${{ github.event.inputs.version_type }}' >> .changeset/auto-version.md
            echo '"@thenightproject/supaweb3-nuxt": ${{ github.event.inputs.version_type }}' >> .changeset/auto-version.md
            echo "---" >> .changeset/auto-version.md
            echo "" >> .changeset/auto-version.md
            echo "Automated version bump: ${{ github.event.inputs.version_type }}" >> .changeset/auto-version.md
            pnpm changeset version
          fi

      - name: Version packages (auto on main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "---" > .changeset/auto-patch.md
          echo '"@thenightproject/supaweb3-ui": patch' >> .changeset/auto-patch.md
          echo '"@thenightproject/supaweb3-config": patch' >> .changeset/auto-patch.md
          echo '"@thenightproject/supaweb3-nuxt": patch' >> .changeset/auto-patch.md
          echo "---" >> .changeset/auto-patch.md
          echo "" >> .changeset/auto-patch.md
          echo "Automated patch version bump for main branch" >> .changeset/auto-patch.md
          pnpm changeset version

      - name: Build packages
        run: pnpm run build


      - name: Publish to GitHub Packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "@thenightproject:registry=https://npm.pkg.github.com" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=$NODE_AUTH_TOKEN" >> ~/.npmrc
          pnpm changeset publish

  # ===============================
  # NPM RELEASE STAGE (PRODUCTION)
  # ===============================
  release-npm:
    name: Release to NPM
    runs-on: ubuntu-latest
    needs: [build]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.release_to_npm == 'true') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js for NPM
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update package.json for NPM
        run: |
          # Get the current version from package.json
          VERSION=$(node -p "require('./packages/ui/package.json').version")

          find packages -name "package.json" -exec node -e "
            const fs = require('fs');
            const path = process.argv[1];
            const version = process.argv[2];
            const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));

            if (!pkg.private) {
              // Reset to original NPM-friendly names for NPM publishing
              if (pkg.name.startsWith('@thenightproject/supaweb3-')) {
                const pkgName = pkg.name.replace('@thenightproject/supaweb3-', '');
                pkg.name = '@supaweb3/' + pkgName;
              }

              // Update internal dependencies and resolve workspace protocol
              if (pkg.dependencies) {
                Object.keys(pkg.dependencies).forEach(dep => {
                  if (dep.startsWith('@thenightproject/supaweb3-')) {
                    const newDepName = '@supaweb3/' + dep.replace('@thenightproject/supaweb3-', '');
                    // Convert workspace:* to actual version
                    pkg.dependencies[newDepName] = pkg.dependencies[dep] === 'workspace:*' ? '^' + version : pkg.dependencies[dep];
                    delete pkg.dependencies[dep];
                  }
                });
              }

              // Ensure public access for NPM
              pkg.publishConfig = {
                access: 'public'
              };
              fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
            }
          " {} $VERSION \;

      - name: Update Nuxt module source for NPM
        run: |
          # Update the Nuxt module to reference NPM package names
          sed -i 's/@thenightproject\/supaweb3-ui/@supaweb3\/ui/g' packages/nuxt/src/module.ts
          sed -i 's/@thenightproject\/supaweb3-config/@supaweb3\/config/g' packages/nuxt/src/module.ts

      - name: Version packages for NPM
        run: |
          echo "---" > .changeset/npm-release.md
          echo '"@supaweb3/ui": ${{ github.event.inputs.version_type || 'patch' }}' >> .changeset/npm-release.md
          echo '"@supaweb3/config": ${{ github.event.inputs.version_type || 'patch' }}' >> .changeset/npm-release.md
          echo '"@supaweb3/nuxt": ${{ github.event.inputs.version_type || 'patch' }}' >> .changeset/npm-release.md
          echo "---" >> .changeset/npm-release.md
          echo "" >> .changeset/npm-release.md
          echo "Release to NPM: ${{ github.event.inputs.version_type || 'patch' }}" >> .changeset/npm-release.md
          pnpm changeset version

      - name: Rebuild packages for NPM
        run: pnpm run build

      - name: Release to NPM
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx changeset publish

  # ===============================
  # STORYBOOK DEPLOYMENT STAGE (DISABLED)
  # ===============================
  # Disabled until Storybook Vue plugin configuration is fixed
  # deploy-storybook:
  #   name: Deploy Storybook
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   permissions:
  #     contents: write
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v2
  #       with:
  #         version: 9

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20.x

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts

  #     - name: Setup Pages
  #       uses: actions/configure-pages@v5
  #       with:
  #         enablement: true

  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: './packages/storybook/storybook-static'

  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4

  # ===============================
  # CREATE RELEASE STAGE
  # ===============================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [deploy-github-packages]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_packages == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./packages/ui/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          body: |
            ## SupaWeb3 UI Library Release v${{ steps.package-version.outputs.version }}

            ### 🚀 What's New
            This release includes the latest SupaWeb3 UI components and features for Vue 3 and Nuxt 3.

            ### 📦 Package Versions
            - @thenightproject/supaweb3-ui: v${{ steps.package-version.outputs.version }}
            - @thenightproject/supaweb3-config: v${{ steps.package-version.outputs.version }}
            - @thenightproject/supaweb3-nuxt: v${{ steps.package-version.outputs.version }}

            ### 🔧 Installation (GitHub Packages)
            ```bash
            # Configure registry for @thenightproject scope
            npm config set @thenightproject:registry https://npm.pkg.github.com

            # Install packages
            npm install @thenightproject/supaweb3-nuxt
            ```

            Or with pnpm:
            ```bash
            pnpm config set @thenightproject:registry https://npm.pkg.github.com
            pnpm add @thenightproject/supaweb3-nuxt
            ```

            ### 📚 Documentation
            - [Storybook Documentation](${{ github.server_url }}/${{ github.repository }}/pages)
            - [GitHub Repository](${{ github.server_url }}/${{ github.repository }})

            ### 🎯 Features
            - Vue 3 + Composition API
            - Nuxt 3 module support
            - Tailwind CSS styling
            - TypeScript support
            - Web3 components for wallets, tokens, NFTs
            - Dark mode support
            - Responsive design
          draft: false
          prerelease: ${{ contains(github.event.inputs.version_type, 'prerelease') }}